
val df = spark.read.schema("""symboling INT, normalized-losses INT,make STRING, fuel-type STRING, aspiration STRING,num-of-doors STRING, body-style STRING,drive-wheels STRING, engine-location STRING, wheel-base DOUBLE, length DOUBLE, width DOUBLE, height DOUBLE, curb-weight INT, engine-type STRING, num-of-cylinders STRING, engine-size INT, fuel-system STRING, bore DOUBLE, stroke DOUBLE,compressionratio DOUBLE, horsepower DOUBLE, peak-rpm DOUBLE, city-mpg INT, highway-mpg INT, price DOUBLE""").option("header",false).csv("Automobile_data.csv")



normalized-losses ?

num-of-doors

bore

stroke

horsepower

peak-rpm



price

df.filter("price = '?'").select($"normalized-losses",$"num-of-doors",$"bore",$"bore",$"stroke",$"horsepower",$"peak-rpm",$"price").show


df.filter("price = '?' or horsepower = '?' or `num-of-doors` ='?' or  `normalized-losses` = '?' or bore ='?' or stroke = '?' or `peak-rpm` = '?' ").select($"normalized-losses",$"num-of-doors",$"bore",$"stroke",$"horsepower",$"peak-rpm",$"price").show 

df.filter("price != '?' and horsepower != '?' and `num-of-doors` != '?' and   `normalized-losses` != '?' and bore !='?' and stroke != '?' and `peak-rpm` != '?' ").count

automobileData.select($"make",$"city-mpg").sort($"city-mpg".desc).limit(10).coalesce(1).write.mode("overwrite").option("header",true).csv("top_10_city_mpg.csv")

automobileData.select($"make").distinct.coalesce(1).write.mode("overwrite").option("header",true).csv("distinct_makers.csv")




val df = spark.read.csv("ashwin/Data/Automobile_data.csv")

val df = spark.read.schema("symboling INT, normalized_losses INT,make STRING, fuel_type STRING, aspiration STRING,num_of_doors STRING, body_style STRING,drive_wheels STRING, engine_location STRING, wheel_base DOUBLE, length DOUBLE, width DOUBLE, height DOUBLE, curb_weight INT, engine_type STRING, num_of_cylinders STRING, engine_size INT, fuel_system STRING, bore DOUBLE, stroke DOUBLE,compression_ratio DOUBLE, horsepower DOUBLE, peak_rpm DOUBLE, city_mpg INT, highway_mpg INT, price DOUBLE").option("header",false).csv("ashwin/Data/Automobile_data.csv")


df.filter("price = '?' or horsepower = '?' or `num_of_doors` ='?' or  `normalized_losses` = '?' or bore ='?' or stroke = '?' or `peak_rpm` = '?' ").select($"normalized_losses",$"num_of_doors",$"bore",$"stroke",$"horsepower",$"peak_rpm",$"price").show 


df.filter("price = '?' or horsepower = '?' or num_of_doors ='?' or  normalized_losses = '?' or bore ='?' or stroke = '?' or peak_rpm = '?' or price is null or horsepower is null or num_of_doors is null or  normalized_losses is null or bore is null or stroke is null or peak_rpm is null").select($"normalized_losses",$"num_of_doors",$"bore",$"stroke",$"horsepower",$"peak_rpm",$"price").show 


df.select("normalized_losses").filter("normalized_losses is not null").agg(round(avg("normalized_losses"),2).alias("mean_normalized_losses")).show

--122.0


df.select("num_of_doors").filter("num_of_doors is not null").groupBy($"num_of_doors").agg(count(lit(1)).alias("mode_num_of_doors")).show
--four


df.select("horsepower").filter("horsepower is not null").agg(round(avg("horsepower"),2).alias("mean_horsepower")).show

--104.26

df.select("bore").filter("bore is not null").agg(round(avg("bore"),2).alias("mean_bore")).show

--3.33

df.select("stroke").filter("stroke is not null").agg(round(avg("stroke"),2).alias("mean_stroke")).show

--3.26

df.select("peak_rpm").filter("peak_rpm is not null").agg(round(avg("peak_rpm"),2).alias("peak_rpm")).show

--5125.37

df.select("price").filter("price is not null").agg(round(avg("price"),2).alias("mean_price")).show

--13207.13

df.select($"normalized_losses",$"num_of_doors",$"bore",$"stroke",$"horsepower",$"peak_rpm",$"price").show

cast((case when `normalized-losses` ='?' then 122 else `normalized-losses` end) as int) as normalized_losses


val automobileDF = df.selectExpr(
"cast(symboling as int) as symboling",
 "cast((case when `normalized-losses` ='?' then 122 when `normalized-losses` is null then 122 else `normalized-losses` end) as int) as `normalized-losses`",
 "make",
 "`fuel-type`",
 "aspiration",
 "cast((case when `num-of-doors` ='?' then 'four' when `num-of-doors` is null then 'four' else `num-of-doors` end) as string) as `num-of-doors`",
  "`body-style`",
 "`drive-wheels`",
 "`engine-location`",
 "cast(`wheel-base` as double) as `wheel-base`",
 "cast(`length` as double) as `length`",
 "cast(`width` as double) as `width`",
 "cast(`height` as double) as `height`",
 "cast(`curb-weight` as int) as `curb-weight`",
 "`engine-type`",
 "`num-of-cylinders`",
 "cast(`engine-size` as int) as `engine-size`",
 "`fuel-system`",
 "cast((case when `bore` ='?' then 3.33 when `bore` is null then 3.33 else `bore` end) as double) as `bore`",
 "cast((case when `stroke` ='?' then 3.26 when `stroke` is null then 3.26 else `stroke` end) as double) as `stroke`",
 "cast(`compression-ratio` as double) as `compression-ratio`",
 "cast((case when `horsepower` ='?' then 104.0 when `horsepower` is null then 104.0 else `horsepower` end) as double) as `horsepower`",
 "cast((case when `peak-rpm` ='?' then 5125.0 when `peak-rpm` is null then 5215.0 else `peak-rpm` end) as double) as `peak-rpm`",
 "cast(`city-mpg` as int) as `city-mpg`",
 "cast(`highway-mpg` as int) as `highway-mpg`",
 "cast((case when `price` ='?' then 13207.0 when `price` is null then 13207.0 else `price` end) as double) as `price`"
 ).show


automobileDF.coalesce(1).write.option("header",true).csv("final_data.csv")

automobileDF.select($"make").distinct.coalesce(1).write.option("header",true).csv("distinct_makers.csv")


